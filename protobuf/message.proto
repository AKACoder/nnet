syntax = "proto3";

package protobuf;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "protobuf/node.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// For tests
option (gogoproto.testgen_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;

enum RoutingType {
  DIRECT = 0;
  RELAY = 1;
  BROADCAST = 2;
}

enum MessageType {
  PING = 0;
  GET_NODE = 1;
  GET_SUCC_AND_PRED = 2;
  FIND_SUCCESSORS = 3;
  FIND_PREDECESSOR = 4;
}

message Message {
  RoutingType routing_type = 1;
  MessageType message_type = 2;
  bytes message = 3;
  bytes message_id = 4;
  bytes reply_to_id = 5;
  bytes src_id = 6;
  bytes dest_id = 7;
}

message Ping {
}

// It took me a month to finally decide not to name this as Pong for naming
// consistency
message PingReply {
}

message GetNode {
}

message GetNodeReply {
  Node node = 1;
}

message GetSuccAndPred {
  uint32 num_succ = 1;
  uint32 num_pred = 2;
}

message GetSuccAndPredReply {
  repeated Node successors = 1;
  repeated Node predecessors = 2;
}

message FindSuccessors {
  bytes key = 1;
  uint32 num_succ = 2;
}

message FindSuccessorsReply {
  repeated Node successors = 1;
}

message FindPredecessor {
  bytes key = 1;
}

message FindPredecessorReply {
  Node predecessor = 1;
}
